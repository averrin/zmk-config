#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// layers ID definition
#define BASE 0
#define EXT  1
#define NAV  2
#define FUN  3
#define ADJ  4

// macros definition
#define undo LC(Z)
#define redo LC(LS(Z))
#define prev_screen LC(LG(LEFT))
#define next_screen LC(LG(RIGHT))
#define meh LC(LS(LALT))
#define prev_win LA(TAB)
#define next_win LA(LS(TAB))
#define deg RA(LS(SEMI))

// tune mod tap
&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

// layer tap config
&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;      // double-tap + hold repeats tap-key
};

// caps word settings
&caps_word {
    continue-list = <UNDERSCORE MINUS N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

// main tree
/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV FUN>;
            then-layer = <ADJ>;
        };
    };

    behaviors {
        // HOME ROW MODS
        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // double tapping same key allows for repeating
            global-quick-tap-ms = <150>;         // without PR #1387 use global-quick-tap instead
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;    // <---[[right-hand keys]]
            hold-trigger-on-release;             // requires PR #1423 (or Urob's ZMK fork)
        };

        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // double tapping same key allows for repeating
            global-quick-tap-ms = <150>;         // without PR #1387 use global-quick-tap instead
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;    // <---[[right-hand keys]]
            hold-trigger-on-release;             // requires PR #1423 (or Urob's ZMK fork)
        };

        osm: one_shot_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "ONE_SHOT_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&sk>, <&kp>;
        };

        // TAP DANCES
        bslhpipe: tap_dance_backslash_pipe {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BACKSLASH_PIPE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BSLH>, <&kp PIPE>;
        };

        grvtilde: tap_dance_grave_tilde {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_GRAVE_TILDE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };

        apoquote: tap_dance_apostrophe_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_APOSTROPE_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SQT>, <&kp DQT>;
        };

        eurodollar: tap_dance_euro_dollar {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EURO_DOLLAR";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RA(N5)>, <&kp DLLR>;
        };

        close: tap_dance_close {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CLOSE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(F4)>, <&kp LA(F4)>;
        };
    };

    // macros
    macros {
        sel_word: select_word {
            label = "ZM_SELECT_WORD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp LEFT>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp LSHFT &kp LCTRL>
                ;
        };
    };

    // combos for accents dead keys (for US_intl_altgr_deadkeys OS layout)
    combos {
        compatible = "zmk,combos";
        combo_acc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            layers = <BASE>;
            bindings = <&kp RA(SINGLE_QUOTE)>;
        };
        combo_grv {
            timeout-ms = <50>;
            key-positions = <2 3>;
            layers = <BASE>;
            bindings = <&kp RA(GRAVE)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
        // ----------------------------------------------------------------------------------------------------------------------------
        // |    Q    |    W    |    F    |    P    |    B    |                      |    J    |    L    |    I    |    Y    |    ;    |
        // |    A    |    R    |    S    |    T    |    G    |                      |    M    |    N    |    E    |    I    |    O    |
        // |    Z    |    X    |    C    |    D    |    V    |                      |    K    |    H    |    ,    |    .    |    /    |
        //                               |   ESC   |  SPACE  |   TAB   |  |  RETURN |BACKSPACE|   DEL   |

            bindings = <
                &kp Q        &kp W        &kp F          &kp P         &kp B                 &kp J   &kp L          &kp U           &kp Y         &kp SEMI
                &hml LALT A  &hml LGUI R  &hml LSHIFT S  &hml LCTRL T  &kp G                 &kp M   &hmr RCTRL N   &hmr RSHIFT E   &hmr RGUI I   &hmr RALT O
                &kp Z        &kp X        &kp C          &kp D         &kp V                 &kp K   &kp H          &kp COMMA       &kp DOT       &kp FSLH
                                              &kp ESC    &lt FUN SPACE   &mt meh TAB   &lt EXT RET   &lt NAV BSPC  &kp DEL
            >;
        };


        ext_layer {

            bindings = <
                &kp FSLH   &kp N7  &kp N8  &kp N9  &kp MINUS          &kp AT      &kp QMARK   &kp EXCL   &bslhpipe   &grvtilde
                &kp ASTRK  &kp N4  &kp N5  &kp N6  &kp PLUS           &kp UNDER   &kp LPAR    &kp LBKT   &kp LBRC    &apoquote
                &kp PRCNT  &kp N1  &kp N2  &kp N3  &kp EQUAL          &kp CARET   &kp RPAR    &kp RBKT   &kp RBRC    &eurodollar
                                        &kp COMMA  &kp N0  &kp DOT    &none  &none  &none
            >;
        };


        nav_layer {

            bindings = <
                &close         &kp C_MUTE      &kp C_VOL_DN      &kp C_VOL_UP      &kp redo            &kp next_win  &kp HOME          &kp UP           &kp END     &kp PG_UP
                &kp C_AL_LOCK  &osm RALT RALT  &osm LSHFT LSHFT  &osm LCTRL LCTRL  &kp undo            &kp prev_win  &kp LEFT          &kp DOWN         &kp RIGHT   &kp PG_DN
                &kp CAPS       &kp C_AC_CUT    &kp C_AC_COPY     &kp C_AC_PASTE    &caps_word          &kp PSCRN     &kp prev_screen   &kp next_screen  &sel_word   &none
                                            &none  &mo FUN  &none  &none  &none  &none
            >;
        };



        fun_layer {

            bindings = <
                &none  &kp F7  &kp F8  &kp F9  &kp F10             &kp HASH  &none  &kp deg  &none  &none
                &none  &kp F4  &kp F5  &kp F6  &kp F11             &none     &none  &none    &none  &none
                &none  &kp F1  &kp F2  &kp F3  &kp F12             &kp AMPS  &none  &none    &none  &none
                                            &none  &none  &none    &none  &mo NAV  &none
            >;
        };


        adj_layer {

            bindings = <
                &bootloader  &none         &none         &none         &reset              &reset  &none  &none  &none  &bootloader
                &bt BT_CLR   &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &out OUT_TOG        &none   &none  &none  &none  &none
                &none        &none         &none         &none         &none               &none   &none  &none  &none  &none
                                                            &none  &none  &none  &none  &none  &none
            >;
        };
    };
};