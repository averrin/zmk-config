#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// layers ID definition
#define BASE_OSX 0
#define NAV_OSX 1
#define NUM 2
#define SYM 3
#define ADJ 4
#define LOCKL 5

#include "combos.dtsi"
#include "mouse.dtsi"

// tapping term definition
#define TAP_TERM_MS 200
#define QUICK_TAP_MS 125

// macros definition
#define meh LC(LS(LALT))
#define hyper LG(LC(LS(LALT)))
#define deg RA(LS(SEMI))

// OSX specific macros
#define undo_OSX LG(Z)
#define redo_OSX LG(LS(Z))
#define prev_screen_OSX LC(LEFT)
#define next_screen_OSX LC(RIGHT)
#define prev_win_OSX LG(TAB)
#define next_win_OSX LG(LS(TAB))

// 36 keys physical layout
#define LEFT_KEYS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 // left-hand keys
#define RIGHT_KEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 // right-hand keys
#define THUMBS 30 31 32 33 34 35 // thumb keys

// tune mod tap
&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

// layer tap config
&lt {
    flavor = "balanced";
    tapping-term-ms = <TAP_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;      // double-tap + hold repeats tap-key
};

// tune sticky key
&sk {
    release-after-ms = <1000>;
    quick-release;
};

// caps word settings
&caps_word {
    continue-list = <UNDERSCORE MINUS N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};


// main tree
/ {
    behaviors {
        // HOME ROW MODS
        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;       // double-tap + hold repeats tap-key
            global-quick-tap-ms = <150>;         // without PR #1387 use global-quick-tap instead
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_KEYS THUMBS>;
            hold-trigger-on-release;
        };

        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;       // double-tap + hold repeats tap-key
            global-quick-tap-ms = <150>;         // without PR #1387 use global-quick-tap instead
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_KEYS THUMBS>;
            hold-trigger-on-release;
        };

        // TAP DANCES
        eurodollar: tap_dance_euro_dollar {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EURO_DOLLAR";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_TERM_MS>;
            bindings = <&kp DLLR>, <&kp RA(N5)>;
        };
        eurodollar_OSX: tap_dance_euro_dollar_OSX {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EURO_DOLLAR";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_TERM_MS>;
            bindings = <&kp DLLR>, <&kp LA(LS(N2))>;
        };
        prev_next_song: prev_next_song {
            compatible = "zmk,behavior-tap-dance";
            label = "PREV_NEXT_SONG";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_TERM_MS>;
            bindings = <&kp C_NEXT>, <&kp C_PREV>;
        };
        screenshot_OSX: screenshot_OSX { // single-tap: area selector, double-tap: full-screen
            compatible = "zmk,behavior-tap-dance";
            label = "SCREENSHOT_OSX";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_TERM_MS>;
            bindings = <&kp LG(LS(NUMBER_4))>, <&kp LG(LS(NUMBER_3))>;
        };

        // tap: sticky-shift | lshft + tap: caps-word | hold: set in keymap (HYPER)
        ss_cw: ss_cw {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_CW";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lt_shft: lt_shft {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SHFT";
            #binding-cells = <2>;
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            flavor = "balanced";
            bindings = <&kp>, <&ss_cw>;
        };

        // tap: backspace | lshft + tap: delete | rshft + tap: shift-delete | hold: nav layer
        bs_del_nav: bs_del_nav {
            compatible = "zmk,behavior-mod-morph";
            label = "BS_DEL_NAV";
            #binding-cells = <0>;
            bindings = <&lt NAV BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bs_del_nav_OSX: bs_del_nav_OSX {
            compatible = "zmk,behavior-mod-morph";
            label = "BS_DEL_NAV";
            #binding-cells = <0>;
            bindings = <&lt NAV_OSX BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: space | shft + tap: dot -> space -> sticky shift | hold: activate layer
        spc_morph: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPC_MORPH";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&dot_spc>;
            mods = <(MOD_LSFT)>;
        };
        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            #binding-cells = <2>;
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            flavor = "balanced";
            bindings = <&mo>, <&spc_morph>;
        };

        //usefull mod-morphs
        dot_to_colon: dot_to_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_TO_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma_to_semi: comma_to_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_TO_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        quest_to_excl: quest_to_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "quest_to_excl";
            #binding-cells = <0>;
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        single_to_doublequote: single_to_doublequote {
            compatible = "zmk,behavior-mod-morph";
            label = "SINGLE_TO_DOUBLEQUOTE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // right ring finger + left middle finger morphs into accent dead key
        s_to_grave: s_to_grave { // specular to Option+E for the acute accent
            compatible = "zmk,behavior-mod-morph";
            label = "S_TO_GRAVE";
            #binding-cells = <0>;
            bindings = <&hml LSHIFT S>, <&kp RA(GRAVE)>;
            mods = <MOD_RALT>;
        };
    };

    // macros
    macros {
        sel_word: select_word {
            label = "ZM_SELECT_WORD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp LEFT>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp LSHFT &kp LCTRL>
                ;
        };

        dot_spc: dot_spc{
            label = "ZM_DOT_SPACE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
        };

        // Windows sleep key (fix LOCK not working on Windows)
        win_sleep: win_sleep{
            label = "ZM_WIN_SLEEP";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            tap-ms = <5>;
            bindings = <&kp LG(X) &kp U &kp S>;
        };

        pc_connect: pc_connect{
            label = "ZM_PC_CONNECT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            tap-ms = <5>;
            bindings = <&bt BT_SEL 1 &to BASE>;
        };

        osx_connect: osx_connect{
            label = "ZM_PC_CONNECT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            tap-ms = <5>;
            bindings = <&bt BT_SEL 0 &to BASE_OSX>;
        };

        macro_par: macro_par{
            label = "ZM_PAR";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };
        macro_bkt: macro_bkt{
            label = "ZM_BKT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        };
        macro_brc: macro_brc{
            label = "ZM_BRC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        };
        macro_deg_win: macro_deg_win{
            label = "ZM_DEG";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer_OSX {
            bindings = <
                &kp V         &kp W        &kp F          &kp P         &kp B               &kp J       &kp L          &kp U           &kp Y         &single_to_doublequote
                &hml LCTRL R  &hml LALT S  &hml LSHIFT T  &hml LGUI H   &kp K               &kp X       &hmr RGUI N    &hmr RSHIFT A   &hmr RALT I   &hmr RCTRL O
                &none         &kp C        &kp G          &kp D         &none               &none       &kp M          &comma_to_semi  &dot_to_colon &none
                                           &none          &lt MOUSE RET &lt_spc NUM 0       &lt_shft hyper 0  &kp E   &none
            >;
        };

        nav_layer_OSX{
            bindings = <
                &none      &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PLAY_PAUSE       &kp PG_UP  &kp LA(BSPC)        &kp UP    &kp LA(DEL)          &none
                &sk LCTRL  &sk LALT    &sk LSHFT     &sk LGUI      &prev_next_song        &kp PG_DN  &hmr HOME LEFT      &kp DOWN  &hmr END RIGHT       &kp LC(LG(Q))
                &none      &none       &kp C_BRI_DN  &kp C_BRI_UP  &none                  &none      &kp prev_screen_OSX &none     &kp next_screen_OSX  &screenshot_OSX
                                       &none         &none         &none                  &none      &none               &none
            >;
        };

        num_layer{
            bindings = <
                &none    &kp F7  &kp F8  &kp F9  &kp F10          &kp PLUS   &kp N7  &kp N8  &kp N9  &none
                &kp F12  &kp F4  &kp F5  &kp F6  &kp F11          &kp MINUS  &kp N4  &kp N5  &kp N6  &kp ASTERISK
                &kp F13  &kp F1  &kp F2  &kp F3  &none            &none      &kp N1  &kp N2  &kp N3  &kp SLASH
                                 &none   &none   &none            &kp DOT    &kp N0  &none
            >;
        };

        mouse_layer{
            bindings = <
                &none  &none  &none  &none  &none        &none    U_WH_D    U_MS_U    U_WH_U    &none
                &none  &none  &none  &none  &none        &none    U_MS_L    U_MS_D    U_MS_R    &none
                &none  &none  &none  &none  &none        &none    &none     &none     &none     &none
                              &none  &none  &none        U_BTN1   U_BTN2    &none
            >;
        };

        adj_layer {
            bindings = <
                &none        &none         &to BASE      &to BASE_OSX  &bootloader        &bootloader  &none  &none  &none  &none
                &bt BT_CLR   &bt BT_SEL 2  &pc_connect   &osx_connect  &sys_reset         &sys_reset   &none  &none  &none  &none
                &none        &bt BT_SEL 4  &bt BT_SEL 3  &out OUT_TOG  &none              &none        &none  &none  &none  &none
                                                         &none  &none  &none              &none  &none  &none
            >;
        };

        lock_layer {
            bindings = <
                &none  &none  &none  &none  &none        &none  &none  &none  &none  &none
                &none  &none  &none  &none  &none        &none  &none  &none  &none  &none
                &none  &none  &none  &none  &none        &none  &none  &none  &none  &none
                              &none  &none  &none        &none  &none  &none
            >;
        };

    };
};
